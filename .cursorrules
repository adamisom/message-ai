# MessageAI Project Rules

## New Chat Initialization

**IMPORTANT:** If this is a new chat (the first message from the user in this conversation):

1. **First, read `/docs/memory.md`** before responding to the user's question
2. This file contains critical project context, decisions, and preferences
3. After reading memory.md, proceed to answer the user's question
4. Only read it once per chat session (not on every message)

## Critical Constraints

### Commit Workflow

- Commit during substantial PR implementation work, before user review
- Do NOT commit during user's PR review/approval phase unless they ask me to
- **Before each commit:** run `npm run validate` (lint + type-check + test)
- If validation fails: fix issues, validate again, then commit fixes
- **After commit:** Do NOT run validate again (linter may auto-fix imports, creating extra commits)
- If linter auto-fixed files after commit, include those fixes in the next commit
- Review changes and assess if high-value unit tests should be added
- Write succinct, clear commit messages
- Only commit when code is working and tests pass

### Progress Tracking

- After completing a phase (or significant tasks within a phase), update and check off items in `/docs/PROGRESS_TRACKER.md`
- Mark tasks as complete with checkboxes: `- [x] Task completed`
- Progress tracker updates should be committed AFTER code commits (separate commit)
- This helps track overall project progress and ensures nothing is missed

### Deployment

- Always prefix deploy commands with `time` to measure deployment duration
- Example: `time firebase deploy` instead of `firebase deploy`

### Git History

- NEVER rewrite git history (no force push, no rebase on shared branches, no --amend on pushed commits)
- Use `git revert` instead of rewriting history to undo changes

### Document Generation

- Check in before creating a markdown document — explain the purpose to me first
- NEVER directly update `/docs/memory.md` — instead, suggest changes in chat when updating lots of documentation
- The user maintains direct control over memory.md

### Accuracy

- **NEVER** claim "this is how WhatsApp does it" or "this is the approach [app] takes" unless you have verified information
- Don't make up implementation details about how other apps work

### Version Control

- All dependency versions are **PINNED** (Expo SDK 54, React 19.1.0, React Native 0.81)
- Do NOT upgrade dependencies without explicit approval
- Check package.json before installing new packages

## Architecture Guidelines

### Navigation

- Use **Expo Router** (file-based routing) - it's already set up
- Don't install React Navigation separately

### State Management

- **Hybrid approach**: Zustand for global state (auth, conversations list), component state for screen-specific data (messages, forms, UI)
- Don't put everything in Zustand

### Firebase

- Always use `firebase.firestore.FieldValue.serverTimestamp()` for timestamps (never client-side `new Date()`)
- Always unsubscribe from Firestore listeners in cleanup functions (common source of memory leaks)

## Documentation

Refer to `/docs/mvp-prd-plus.md` for:

- Complete feature requirements
- Firestore schema
- Implementation details
- Architectural decisions (Section 2: "Key Architectural Decisions")
